- name: Deploy application to EC2
  hosts: ec2_instances
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Update apt cache
      apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install required packages
      apt:
        name:
          - docker.io
          - docker-compose
          - git
          - python3-pip
          - certbot
          - python3-certbot-nginx
        state: present
      when: ansible_os_family == "Debian"

    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add current user to docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: yes
      when: ansible_user != "root"

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Clone or update application repository
      git:
        repo: "{{ git_repo }}"
        dest: "{{ app_dir }}/source"
        version: "{{ git_branch }}"
        force: yes
      become_user: "{{ ansible_user }}"


    - name: Create nginx directories
      file:
        path: "{{ app_dir }}/nginx/{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'
      loop:
        - conf
        - ssl
        - logs

    - name: Copy docker-compose.yml template
      template:
        src: templates/docker-compose.yml.j2
        dest: "{{ app_dir }}/docker-compose.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'


    - name: Copy API Dockerfile
      template:
        src: templates/api.Dockerfile.j2
        dest: "{{ app_dir }}/source/api.Dockerfile"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy Frontend Dockerfile
      template:
        src: templates/frontend.Dockerfile.j2
        dest: "{{ app_dir }}/source/Dockerfile"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Copy Nginx configuration
      template:
        src: templates/nginx.conf.j2
        dest: "{{ app_dir }}/nginx/conf/default.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Shutdown previous stack
      shell: docker-compose down
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: /usr/local/bin:{{ ansible_env.PATH }}

    - name: Remove existing self-signed certificates
      file:
        path: "{{ app_dir }}/nginx/ssl/{{ item }}"
        state: absent
      loop:
        - fullchain.pem
        - privkey.pem
      when: force_new_cert | default(false) | bool


    - name: Check for existing Let's Encrypt certificates
      stat:
        path: "{{ app_dir }}/nginx/ssl/fullchain.pem"
      register: ssl_cert

    - name: Obtain Let's Encrypt certificates
      command: >
        certbot certonly --standalone --agree-tos --email {{ admin_email }} 
        -d {{ domain_name }} --non-interactive
        --cert-path {{ app_dir }}/nginx/ssl/fullchain.pem 
        --key-path {{ app_dir }}/nginx/ssl/privkey.pem
      args:
        creates: "{{ app_dir }}/nginx/ssl/fullchain.pem"
      when: not ssl_cert.stat.exists
      register: certbot_result

    - name: Copy Let's Encrypt certificates to Nginx directory
      copy:
        src: "/etc/letsencrypt/live/{{ domain_name }}/{{ item.src }}"
        dest: "{{ app_dir }}/nginx/ssl/{{ item.dest }}"
        remote_src: yes
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      loop:
        - { src: 'fullchain.pem', dest: 'fullchain.pem' }
        - { src: 'privkey.pem', dest: 'privkey.pem' }
      when: not ssl_cert.stat.exists

    - name: Generate self-signed certificate (fallback)
      shell: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
        -keyout {{ app_dir }}/nginx/ssl/privkey.pem \
        -out {{ app_dir }}/nginx/ssl/fullchain.pem \
        -subj "/CN={{ domain_name }}"
      args:
        creates: "{{ app_dir }}/nginx/ssl/fullchain.pem"
      when: not ssl_cert.stat.exists and (certbot_result is defined and certbot_result.failed is defined and certbot_result.failed)

    - name: Set SSL certificates permissions
      file:
        path: "{{ app_dir }}/nginx/ssl/{{ item }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'
      loop:
        - privkey.pem
        - fullchain.pem

    - name: Add Certbot auto-renewal cron job
      cron:
        name: "Let's Encrypt certificate renewal"
        job: "certbot renew --quiet && systemctl reload nginx"
        special_time: daily
        state: present


    - name: Create environment file
      template:
        src: templates/env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0600'

    - name: Build docker containers
      shell: docker-compose build --no-cache
      args:
         chdir: "{{ app_dir }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: /usr/local/bin:{{ ansible_env.PATH }}


    - name: Start application stack
      shell: docker-compose up -d
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ ansible_user }}"
      environment:
        PATH: /usr/local/bin:{{ ansible_env.PATH }}

    - name: Show application status
      shell: docker-compose ps
      args:
        chdir: "{{ app_dir }}"
      register: app_status
      changed_when: false
      become_user: "{{ ansible_user }}"

    - name: Display application status
      debug:
        msg: "{{ app_status.stdout_lines }}"

    - name: Wait for the application to be fully running
      pause:
        seconds: 10

    - name: Check if website is accessible
      uri:
        url: "https://{{ domain_name }}"
        validate_certs: no
      register: website_check
      ignore_errors: yes
      delegate_to: localhost

    - name: Display deployment result
      debug:
        msg: "Application deployed successfully! Access at https://{{ domain_name }}"
      when: website_check is success

    - name: Display deployment warning
      debug:
        msg: "Application deployed, but website check failed. You may need to configure DNS or wait for services to fully start."
      when: website_check is failed